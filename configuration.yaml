# Loads default set of integrations. Do not remove.
default_config: {}

# Load frontend themes from the themes folder
frontend:
  themes: !include_dir_merge_named themes

automation: !include automations.yaml
script: !include scripts.yaml
scene: !include scenes.yaml

lovelace:
  mode: yaml  # Optional: ensures YAML mode; skip if already set
  dashboards:
    solar-assistant:
      mode: yaml
      title: Solar Assistant
      icon: mdi:solar-power
      show_in_sidebar: true
      filename: ui_lovelace_minimalist/dashboard/solar-assistant.yaml
    weather-center:
      mode: yaml
      title: Weather Center
      icon: mdi:weather-cloudy
      show_in_sidebar: true
      filename: ui_lovelace_minimalist/dashboard/weather-center.yaml
    weatherflow-dashboard:
      mode: yaml
      title: WeatherFlow Weather Center
      icon: mdi:weather-partly-cloudy
      show_in_sidebar: true
      filename: ui_lovelace_minimalist/dashboard/weatherflow-dashboard.yaml
  resources:
    - url: /local/community/energy-gauge-bundle-card/energy-gauge-bundle-card.js
      type: module
    - url: /local/community/mini-graph-card/mini-graph-card-bundle.js
      type: module
    - url: /local/community/lovelace-card-mod/card-mod.js
      type: module
    - url: /local/community/button-card/button-card.js
      type: module
    - url: /local/community/lovelace-auto-entities/auto-entities.js
      type: module
    - url: /local/community/apexcharts-card/apexcharts-card.js
      type: module
    - url: /local/community/mini-media-player/mini-media-player-bundle.js
      type: module
    - url: /local/community/simple-weather-card/simple-weather-card-bundle.js
      type: module
    - url: /local/community/weather-radar-card/weather-radar-card.js
      type: module
    - url: /local/community/light-entity-card/light-entity-card.js
      type: module
    - url: /local/community/my-cards/my-cards.js
      type: module
    - url: /local/community/vertical-stack-in-card/vertical-stack-in-card.js
      type: module
    - url: /local/community/battery-state-card/battery-state-card.js
      type: module
    - url: /local/community/compass-card/compass-card.js
      type: module
    - url: /local/community/lovelace-paper-buttons-row/paper-buttons-row.js
      type: module
    - url: /local/community/config-template-card/config-template-card.js
      type: module
    - url: /local/community/lovelace-windrose-card/windrose-card.js
      type: module


# Use input_number helpers for static coordinates - more efficient than template sensors
input_number:
  windy_latitude:
    name: Windy Latitude
    min: -90
    max: 90
    step: 0.0001
    mode: box
    unit_of_measurement: "°"
    icon: mdi:latitude
    initial: 38.3368
  
  windy_longitude:
    name: Windy Longitude
    min: -180
    max: 180
    step: 0.0001
    mode: box
    unit_of_measurement: "°"
    icon: mdi:longitude
    initial: -114.1268

sensor:
  # Pressure statistics
  - platform: statistics
    name: "Barometric Pressure 24h Spread"
    entity_id: sensor.st_00174194_air_pressure
    state_characteristic: distance_absolute
    max_age:
      hours: 24
    precision: 2
    
  # Wind statistics for WindRose card
  - platform: statistics
    name: "Wind Speed 1h Stats"
    entity_id: sensor.weatherflow_wind_speed
    state_characteristic: mean
    max_age:
      hours: 1
    precision: 1
  
  - platform: statistics
    name: "Wind Speed 6h Stats" 
    entity_id: sensor.weatherflow_wind_speed
    state_characteristic: mean
    max_age:
      hours: 6
    precision: 1
  
  - platform: statistics
    name: "Wind Speed 24h Stats"
    entity_id: sensor.weatherflow_wind_speed
    state_characteristic: mean
    max_age:
      hours: 24
    precision: 1
    
  - platform: statistics
    name: "Wind Direction 24h Stats"
    entity_id: sensor.weatherflow_wind_direction
    state_characteristic: mean
    max_age:
      hours: 24
    precision: 0

# Store sensitive data in secrets.yaml instead of exposing in configuration
weatherflow:
  api_token: !secret weatherflow_api_token
  station_id: 170071
  
# Sun integration needed for sun elevation sensor
sun:

# Moon sensor for phases
sensor:
  - platform: moon


template:
  # Template Weather platform that extracts from WeatherFlow
  - weather:
      - name: "Home Weather"
        unique_id: home_weather
        condition_template: "{{ states('weather.weatherflow').state }}"
        temperature_template: "{{ state_attr('weather.weatherflow', 'temperature') }}"
        humidity_template: "{{ state_attr('weather.weatherflow', 'humidity') }}"
        pressure_template: "{{ state_attr('weather.weatherflow', 'pressure') }}"
        wind_speed_template: "{{ state_attr('weather.weatherflow', 'wind_speed') }}"
        wind_bearing_template: "{{ state_attr('weather.weatherflow', 'wind_bearing') }}"
        forecast_template: "{{ state_attr('weather.weatherflow', 'forecast') }}"
        attribution_template: "Data provided by WeatherFlow"
        
  # Binary sensors for weather alerts
  - binary_sensor:
      - name: "Severe Weather Alert"
        unique_id: severe_weather_alert
        state: >-
          {% set forecast = state_attr('weather.weatherflow', 'forecast') %}
          {% if forecast is not none and forecast|length > 0 %}
            {% for day in forecast %}
              {% if day.condition in ['lightning-rainy', 'exceptional', 'hail'] or 
                     (day.precipitation_probability is not none and day.precipitation_probability > 70) %}
                {{ true }}
                {% break %}
              {% endif %}
            {% else %}
              {{ false }}
            {% endfor %}
          {% else %}
            {{ false }}
          {% endif %}
        device_class: safety
        icon: mdi:weather-lightning-rainy
        
      - name: "Flood Warning"
        unique_id: flood_warning
        state: >-
          {% set forecast = state_attr('weather.weatherflow', 'forecast') %}
          {% if forecast is not none and forecast|length > 0 %}
            {% for day in forecast %}
              {% if (day.precipitation is not none and day.precipitation > 25) or 
                     (day.condition in ['pouring', 'rainy'] and 
                      day.precipitation_probability is not none and 
                      day.precipitation_probability > 80) %}
                {{ true }}
                {% break %}
              {% endif %}
            {% else %}
              {{ false }}
            {% endfor %}
          {% else %}
            {{ false }}
          {% endif %}
        device_class: moisture
        icon: mdi:home-flood
        
  - sensor:
      - name: "Pressure Trend Icon"
        state: >-
          {% set trend = states('sensor.weatherflow_pressure_trend')|float(0) %}
          {{ 'rising' if trend > 0.1 else 'falling' if trend < -0.1 else 'steady' }}
        icon: >-
          {% set trend = states('sensor.weatherflow_pressure_trend')|float(0) %}
          {{ 'mdi:arrow-up-bold' if trend > 0.1 else 'mdi:arrow-down-bold' if trend < -0.1 else 'mdi:arrow-right-bold' }}
        availability: >-
          {{ states('sensor.weatherflow_pressure_trend') not in ['unavailable', 'unknown', 'none', ''] }}
        attributes:
          friendly_name: "Pressure Trend"
          unit_of_measurement: "mb/h"
          
      # Wind sensors for WindRose card
      - name: "Wind Direction Numeric"
        unique_id: wind_direction_numeric
        state: >-
          {% set direction = states('sensor.st_00174194_wind_direction') %}
          {% if direction | float(0) > 0 or direction | int(0) == 0 %}
            {{ direction | float(0) | round(0) }}
          {% elif direction in ['N', 'n', 'north'] %}
            0
          {% elif direction in ['NNE', 'nne'] %}
            22.5
          {% elif direction in ['NE', 'ne'] %}
            45
          {% elif direction in ['ENE', 'ene'] %}
            67.5
          {% elif direction in ['E', 'e', 'east'] %}
            90
          {% elif direction in ['ESE', 'ese'] %}
            112.5
          {% elif direction in ['SE', 'se'] %}
            135
          {% elif direction in ['SSE', 'sse'] %}
            157.5
          {% elif direction in ['S', 's', 'south'] %}
            180
          {% elif direction in ['SSW', 'ssw'] %}
            202.5
          {% elif direction in ['SW', 'sw'] %}
            225
          {% elif direction in ['WSW', 'wsw'] %}
            247.5
          {% elif direction in ['W', 'w', 'west'] %}
            270
          {% elif direction in ['WNW', 'wnw'] %}
            292.5
          {% elif direction in ['NW', 'nw'] %}
            315
          {% elif direction in ['NNW', 'nnw'] %}
            337.5
          {% else %}
            {{ states('sensor.wind_direction_numeric') }}
          {% endif %}
        unit_of_measurement: "°"
        icon: mdi:compass
        availability: >-
          {{ states('sensor.st_00174194_wind_direction') not in ['unavailable', 'unknown', 'none', ''] }}
        
      - name: "Wind Speed Numeric"
        unique_id: wind_speed_numeric
        state: >-
          {% set speed = states('sensor.st_00174194_wind_speed') %}
          {% if speed is number or speed | float(false) != false %}
            {{ speed | float(0) | round(1) }}
          {% else %}
            {{ states('sensor.wind_speed_numeric') }}
          {% endif %}
        unit_of_measurement: "mph"
        icon: mdi:weather-windy
        availability: >-
          {{ states('sensor.st_00174194_wind_speed') not in ['unavailable', 'unknown', 'none', ''] }}
          
      - name: "Wind Direction 1h Average"
        unique_id: wind_direction_1h_avg
        state: >-
          {% set directions = namespace(values=[]) %}
          {% set now = now() %}
          {% set one_hour_ago = now - timedelta(hours=1) %}
          {% for item in state_attr('sensor.st_00174194_wind_direction', 'historical_values') if item.last_changed > one_hour_ago %}
            {% set directions.values = directions.values + [item.state | float(0)] %}
          {% endfor %}
          {% if directions.values | length > 0 %}
            {{ (directions.values | sum / directions.values | length) | round(0) }}
          {% else %}
            {{ states('sensor.st_00174194_wind_direction') | float(0) | round(0) }}
          {% endif %}
        unit_of_measurement: "°"
        icon: mdi:compass-outline
        
      - name: "Wind Speed 1h Average"
        unique_id: wind_speed_1h_avg
        state: >-
          {% set speeds = namespace(values=[]) %}
          {% set now = now() %}
          {% set one_hour_ago = now - timedelta(hours=1) %}
          {% for item in state_attr('sensor.st_00174194_wind_speed', 'historical_values') if item.last_changed > one_hour_ago %}
            {% set speeds.values = speeds.values + [item.state | float(0)] %}
          {% endfor %}
          {% if speeds.values | length > 0 %}
            {{ (speeds.values | sum / speeds.values | length) | round(1) }}
          {% else %}
            {{ states('sensor.st_00174194_wind_speed') | float(0) | round(1) }}
          {% endif %}
        unit_of_measurement: "mph"
        icon: mdi:weather-windy
      - name: "Pressure Trend Derivative"
        state: >-
          {% set trend = states('sensor.weatherflow_pressure_trend')|float(0) %}
          {% set prev_trend = states.sensor.weatherflow_pressure_trend.attributes.get('previous_reading', 0)|float(0) %}
          {{ ((trend - prev_trend) * 10) | round(2) }}
        icon: >-
          {% set trend = states('sensor.weatherflow_pressure_trend')|float(0) %}
          {% set prev_trend = states.sensor.weatherflow_pressure_trend.attributes.get('previous_reading', 0)|float(0) %}
          {% set derivative = ((trend - prev_trend) * 10) | round(2) %}
          {{ 'mdi:trending-up' if derivative > 0.05 else 'mdi:trending-down' if derivative < -0.05 else 'mdi:trending-neutral' }}
        availability: >-
          {{ states('sensor.weatherflow_pressure_trend') not in ['unavailable', 'unknown', 'none', ''] }}
          
      # Wind direction additional statistics
      - name: "Wind Direction 6h Average"
        unique_id: wind_direction_6h_avg
        state: >-
          {% set directions = namespace(values=[]) %}
          {% set now = now() %}
          {% set six_hours_ago = now - timedelta(hours=6) %}
          {% for item in state_attr('sensor.st_00174194_wind_direction', 'historical_values') if item.last_changed > six_hours_ago %}
            {% set directions.values = directions.values + [item.state | float(0)] %}
          {% endfor %}
          {% if directions.values | length > 0 %}
            {{ (directions.values | sum / directions.values | length) | round(0) }}
          {% else %}
            {{ states('sensor.st_00174194_wind_direction') | float(0) | round(0) }}
          {% endif %}
        unit_of_measurement: "°"
        icon: mdi:compass-outline
        availability: >-
          {{ states('sensor.st_00174194_wind_direction') not in ['unavailable', 'unknown', 'none', ''] }}
        
      - name: "Wind Speed 6h Average"
        unique_id: wind_speed_6h_avg
        state: >-
          {% set speeds = namespace(values=[]) %}
          {% set now = now() %}
          {% set six_hours_ago = now - timedelta(hours=6) %}
          {% for item in state_attr('sensor.st_00174194_wind_speed', 'historical_values') if item.last_changed > six_hours_ago %}
            {% set speeds.values = speeds.values + [item.state | float(0)] %}
          {% endfor %}
          {% if speeds.values | length > 0 %}
            {{ (speeds.values | sum / speeds.values | length) | round(1) }}
          {% else %}
            {{ states('sensor.st_00174194_wind_speed') | float(0) | round(1) }}
          {% endif %}
        unit_of_measurement: "mph"
        icon: mdi:weather-windy
        availability: >-
          {{ states('sensor.st_00174194_wind_speed') not in ['unavailable', 'unknown', 'none', ''] }}
        
      - name: "Pressure inHg"
        state: >-
          {% set pressure = states('sensor.st_00174194_air_pressure')|float(0) %}
          {{ (pressure * 0.02953) | round(2) }}
        unit_of_measurement: "inHg"
        icon: mdi:gauge
        availability: >-
          {{ states('sensor.st_00174194_air_pressure') not in ['unavailable', 'unknown', 'none', ''] }}
          
      - name: "Sun Elevation"
        state: "{{ state_attr('sun.sun', 'elevation') | float(0) | round(1) }}"
        unit_of_measurement: "°"
        icon: >-
          {% set elevation = state_attr('sun.sun', 'elevation') | float(0) %}
          {% if elevation > 0 %}
            mdi:white-balance-sunny
          {% elif elevation > -6 %}
            mdi:weather-sunset
          {% elif elevation > -12 %}
            mdi:weather-night
          {% else %}
            mdi:weather-night
          {% endif %}
          
      - name: "Moon Phase"
        state: >-
          {% set phase = states('sensor.moon') | lower %}
          {% if 'new moon' in phase %}
            New Moon
          {% elif 'waxing crescent' in phase %}
            Waxing Crescent
          {% elif 'first quarter' in phase %}
            First Quarter
          {% elif 'waxing gibbous' in phase %}
            Waxing Gibbous
          {% elif 'full moon' in phase %}
            Full Moon
          {% elif 'waning gibbous' in phase %}
            Waning Gibbous
          {% elif 'last quarter' in phase %}
            Last Quarter
          {% elif 'waning crescent' in phase %}
            Waning Crescent
          {% else %}
            Unknown
          {% endif %}
        icon: >-
          {% set phase = states('sensor.moon') | lower %}
          {% if 'new moon' in phase %}
            mdi:moon-new
          {% elif 'waxing crescent' in phase %}
            mdi:moon-waxing-crescent
          {% elif 'first quarter' in phase %}
            mdi:moon-first-quarter
          {% elif 'waxing gibbous' in phase %}
            mdi:moon-waxing-gibbous
          {% elif 'full moon' in phase %}
            mdi:moon-full
          {% elif 'waning gibbous' in phase %}
            mdi:moon-waning-gibbous
          {% elif 'last quarter' in phase %}
            mdi:moon-last-quarter
          {% elif 'waning crescent' in phase %}
            mdi:moon-waning-crescent
          {% else %}
            mdi:moon-new
          {% endif %}
      
      # Wind direction information for the WindRose card
      - name: "Wind Direction Cardinal"
        unique_id: wind_direction_cardinal
        state: >-
          {% set direction = states('sensor.st_00174194_wind_direction') | float(0) %}
          {% if 348.75 <= direction or direction < 11.25 %}
            N
          {% elif 11.25 <= direction < 33.75 %}
            NNE
          {% elif 33.75 <= direction < 56.25 %}
            NE
          {% elif 56.25 <= direction < 78.75 %}
            ENE
          {% elif 78.75 <= direction < 101.25 %}
            E
          {% elif 101.25 <= direction < 123.75 %}
            ESE
          {% elif 123.75 <= direction < 146.25 %}
            SE
          {% elif 146.25 <= direction < 168.75 %}
            SSE
          {% elif 168.75 <= direction < 191.25 %}
            S
          {% elif 191.25 <= direction < 213.75 %}
            SSW
          {% elif 213.75 <= direction < 236.25 %}
            SW
          {% elif 236.25 <= direction < 258.75 %}
            WSW
          {% elif 258.75 <= direction < 281.25 %}
            W
          {% elif 281.25 <= direction < 303.75 %}
            WNW
          {% elif 303.75 <= direction < 326.25 %}
            NW
          {% elif 326.25 <= direction < 348.75 %}
            NNW
          {% else %}
            N
          {% endif %}
        icon: mdi:compass
        availability: >-
          {{ states('sensor.st_00174194_wind_direction') not in ['unavailable', 'unknown', 'none', ''] }}
          
      # Additional wind statistics sensors for WindRose card
      - name: "Wind Direction 4h Average"
        unique_id: wind_direction_4h_avg
        state: >-
          {% set directions = namespace(values=[]) %}
          {% set now = now() %}
          {% set four_hours_ago = now - timedelta(hours=4) %}
          {% for item in state_attr('sensor.st_00174194_wind_direction', 'historical_values') if item.last_changed > four_hours_ago %}
            {% set directions.values = directions.values + [item.state | float(0)] %}
          {% endfor %}
          {% if directions.values | length > 0 %}
            {{ (directions.values | sum / directions.values | length) | round(0) }}
          {% else %}
            {{ states('sensor.st_00174194_wind_direction') | float(0) | round(0) }}
          {% endif %}
        unit_of_measurement: "°"
        icon: mdi:compass-outline
        availability: >-
          {{ states('sensor.st_00174194_wind_direction') not in ['unavailable', 'unknown', 'none', ''] }}
          
      - name: "Wind Speed 4h Average"
        unique_id: wind_speed_4h_avg
        state: >-
          {% set speeds = namespace(values=[]) %}
          {% set now = now() %}
          {% set four_hours_ago = now - timedelta(hours=4) %}
          {% for item in state_attr('sensor.st_00174194_wind_speed', 'historical_values') if item.last_changed > four_hours_ago %}
            {% set speeds.values = speeds.values + [item.state | float(0)] %}
          {% endfor %}
          {% if speeds.values | length > 0 %}
            {{ (speeds.values | sum / speeds.values | length) | round(1) }}
          {% else %}
            {{ states('sensor.st_00174194_wind_speed') | float(0) | round(1) }}
          {% endif %}
        unit_of_measurement: "mph"
        icon: mdi:weather-windy
        availability: >-
          {{ states('sensor.st_00174194_wind_speed') not in ['unavailable', 'unknown', 'none', ''] }}

